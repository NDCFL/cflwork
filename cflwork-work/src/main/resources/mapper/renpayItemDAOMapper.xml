<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.cflwork.dao.RentPayItemDAO">
    <resultMap id="rentPayItemMap" type="top.cflwork.vo.RentPayItemVo"></resultMap>
    <sql id="search">
        <if test="#{searchVal!=null} and #{searchVal!=''}">
            and (t.id like concat('%${searchVal}%'))
        </if>
    </sql>
    <select id="getById" resultMap="rentPayItemMap" parameterType="long">
        select  t.id , t.rent_pay_id , t.pay_time , t.reality_pay_time , t.is_active , t.out_money , t.in_money , t.pay_money , t.out_time , t.in_time , t.pay_proportion , t.description , t.create_time , t.pay_type , t.master_id , t.hotel_id         from t_rent_pay_item t where t.id = #{id}
    </select>
    <select id="listPage" resultMap="rentPayItemMap">
        select  t.id , t.rent_pay_id , t.pay_time , t.reality_pay_time , t.is_active , t.out_money , t.in_money , t.pay_money , t.out_time , t.in_time , t.pay_proportion , t.description , t.create_time , t.pay_type , t.master_id , t.hotel_id  from t_rent_pay_item t where t.company_id = #{companyId} <include refid="search"></include> order by t.create_time desc limit #{pageNo}, #{pageSize}
    </select>
    <select id="count" resultType="long">
        select count(t.id) from t_rent_pay_item t where t.company_id = #{companyId}  <include refid="search"></include> order by t.create_time desc
    </select>

    <select id="listPages" resultMap="rentPayItemMap">
        select  t.id , t.rent_pay_id , t.pay_time , t.reality_pay_time , t.is_active , t.out_money , t.in_money , t.pay_money , t.out_time , t.in_time , t.pay_proportion , t.description , t.create_time , t.pay_type , t.master_id , t.hotel_id         from t_rent_pay_item t
        <where>
            <if test="rentPayItemVo.id != null and rentPayItemVo.id != ''">
                and t.id = #{rentPayItemVo.id}
            </if>
            <if test="rentPayItemVo.rentPayId != null and rentPayItemVo.rentPayId != ''">
                and t.rent_pay_id = #{rentPayItemVo.rentPayId}
            </if>
            <if test="rentPayItemVo.payTime != null and rentPayItemVo.payTime != ''">
                and t.pay_time = #{rentPayItemVo.payTime}
            </if>
            <if test="rentPayItemVo.realityPayTime != null and rentPayItemVo.realityPayTime != ''">
                and t.reality_pay_time = #{rentPayItemVo.realityPayTime}
            </if>
            <if test="rentPayItemVo.isActive != null and rentPayItemVo.isActive != ''">
                and t.is_active = #{rentPayItemVo.isActive}
            </if>
            <if test="rentPayItemVo.outMoney != null and rentPayItemVo.outMoney != ''">
                and t.out_money = #{rentPayItemVo.outMoney}
            </if>
            <if test="rentPayItemVo.inMoney != null and rentPayItemVo.inMoney != ''">
                and t.in_money = #{rentPayItemVo.inMoney}
            </if>
            <if test="rentPayItemVo.payMoney != null and rentPayItemVo.payMoney != ''">
                and t.pay_money = #{rentPayItemVo.payMoney}
            </if>
            <if test="rentPayItemVo.outTime != null and rentPayItemVo.outTime != ''">
                and t.out_time = #{rentPayItemVo.outTime}
            </if>
            <if test="rentPayItemVo.inTime != null and rentPayItemVo.inTime != ''">
                and t.in_time = #{rentPayItemVo.inTime}
            </if>
            <if test="rentPayItemVo.payProportion != null and rentPayItemVo.payProportion != ''">
                and t.pay_proportion = #{rentPayItemVo.payProportion}
            </if>
            <if test="rentPayItemVo.description != null and rentPayItemVo.description != ''">
                and t.description = #{rentPayItemVo.description}
            </if>
            <if test="rentPayItemVo.createTime != null and rentPayItemVo.createTime != ''">
                and t.create_time = #{rentPayItemVo.createTime}
            </if>
            <if test="rentPayItemVo.payType != null and rentPayItemVo.payType != ''">
                and t.pay_type = #{rentPayItemVo.payType}
            </if>
            <if test="rentPayItemVo.masterId != null and rentPayItemVo.masterId != ''">
                and t.master_id = #{rentPayItemVo.masterId}
            </if>
            <if test="rentPayItemVo.hotelId != null and rentPayItemVo.hotelId != ''">
                and t.hotel_id = #{rentPayItemVo.hotelId}
            </if>
        </where>
        <choose>
            <when test="rentPayItemVo.sort != null and rentPayItemVo.sort.trim() != ''">
                order by t.${rentPayItemVo.sort} t.${rentPayItemVo.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
        <if test="pageQuery.pageNo != null and pageQuery.pageSize != null">
            limit #{pageQuery.pageNo}, #{pageQuery.pageSize}
        </if>
    </select>
    <select id="listAll" resultMap="rentPayItemMap">
        select * from t_rent_pay_item where company_id=#{companyId}
    </select>
    <select id="counts" resultType="long">
        select count(t.id) from t_rent_pay_item t
        <where>
            <if test="rentPayItemVo.id != null and rentPayItemVo.id != ''">
                and t.id = #{rentPayItemVo.id}
            </if>
            <if test="rentPayItemVo.rentPayId != null and rentPayItemVo.rentPayId != ''">
                and t.rent_pay_id = #{rentPayItemVo.rentPayId}
            </if>
            <if test="rentPayItemVo.payTime != null and rentPayItemVo.payTime != ''">
                and t.pay_time = #{rentPayItemVo.payTime}
            </if>
            <if test="rentPayItemVo.realityPayTime != null and rentPayItemVo.realityPayTime != ''">
                and t.reality_pay_time = #{rentPayItemVo.realityPayTime}
            </if>
            <if test="rentPayItemVo.isActive != null and rentPayItemVo.isActive != ''">
                and t.is_active = #{rentPayItemVo.isActive}
            </if>
            <if test="rentPayItemVo.outMoney != null and rentPayItemVo.outMoney != ''">
                and t.out_money = #{rentPayItemVo.outMoney}
            </if>
            <if test="rentPayItemVo.inMoney != null and rentPayItemVo.inMoney != ''">
                and t.in_money = #{rentPayItemVo.inMoney}
            </if>
            <if test="rentPayItemVo.payMoney != null and rentPayItemVo.payMoney != ''">
                and t.pay_money = #{rentPayItemVo.payMoney}
            </if>
            <if test="rentPayItemVo.outTime != null and rentPayItemVo.outTime != ''">
                and t.out_time = #{rentPayItemVo.outTime}
            </if>
            <if test="rentPayItemVo.inTime != null and rentPayItemVo.inTime != ''">
                and t.in_time = #{rentPayItemVo.inTime}
            </if>
            <if test="rentPayItemVo.payProportion != null and rentPayItemVo.payProportion != ''">
                and t.pay_proportion = #{rentPayItemVo.payProportion}
            </if>
            <if test="rentPayItemVo.description != null and rentPayItemVo.description != ''">
                and t.description = #{rentPayItemVo.description}
            </if>
            <if test="rentPayItemVo.createTime != null and rentPayItemVo.createTime != ''">
                and t.create_time = #{rentPayItemVo.createTime}
            </if>
            <if test="rentPayItemVo.payType != null and rentPayItemVo.payType != ''">
                and t.pay_type = #{rentPayItemVo.payType}
            </if>
            <if test="rentPayItemVo.masterId != null and rentPayItemVo.masterId != ''">
                and t.master_id = #{rentPayItemVo.masterId}
            </if>
            <if test="rentPayItemVo.hotelId != null and rentPayItemVo.hotelId != ''">
                and t.hotel_id = #{rentPayItemVo.hotelId}
            </if>
        </where>
        <choose>
            <when test="rentPayItemVo.sort != null and rentPayItemVo.sort.trim() != ''">
                order by t.${rentPayItemVo.sort} ${rentPayItemVo.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
    </select>

    <insert id="save" parameterType="top.cflwork.vo.RentPayItemVo" useGeneratedKeys="true" keyProperty="id">
        insert into t_rent_pay_item (
        rent_pay_id ,pay_time ,reality_pay_time ,is_active ,out_money ,in_money ,pay_money ,out_time ,in_time ,pay_proportion ,description ,create_time ,pay_type ,master_id ,hotel_id                                   ) values (
        #{rentPayId},
        #{payTime},
        #{realityPayTime},
        #{isActive},
        #{outMoney},
        #{inMoney},
        #{payMoney},
        #{outTime},
        #{inTime},
        #{payProportion},
        #{description},
        #{createTime},
        #{payType},
        #{masterId},
        #{hotelId}
        )
    </insert>

    <update id="update" parameterType="top.cflwork.vo.RentPayItemVo">
        update t_rent_pay_item
        <set>
            <if test="rentPayId != null"> rent_pay_id  = #{rentPayId
                    }, </if>
            <if test="payTime != null"> pay_time  = #{payTime
                    }, </if>
            <if test="realityPayTime != null"> reality_pay_time  = #{realityPayTime
                    }, </if>
            <if test="isActive != null"> is_active  = #{isActive
                    }, </if>
            <if test="outMoney != null"> out_money  = #{outMoney
                    }, </if>
            <if test="inMoney != null"> in_money  = #{inMoney
                    }, </if>
            <if test="payMoney != null"> pay_money  = #{payMoney
                    }, </if>
            <if test="outTime != null"> out_time  = #{outTime
                    }, </if>
            <if test="inTime != null"> in_time  = #{inTime
                    }, </if>
            <if test="payProportion != null"> pay_proportion  = #{payProportion
                    }, </if>
            <if test="description != null"> description  = #{description
                    }, </if>
            <if test="createTime != null"> create_time  = #{createTime
                    }, </if>
            <if test="payType != null"> pay_type  = #{payType
                    }, </if>
            <if test="masterId != null"> master_id  = #{masterId
                    }, </if>
            <if test="hotelId != null"> hotel_id  = #{hotelId
                    }</if>
        </set>
        where id = #{id}
    </update>
    <update id="updateStatus">
        update t_rent_pay_item set is_active=#{status} where id=#{id}
    </update>
    <delete id="removeById" parameterType="long">
        delete from t_rent_pay_item where id = #{value}
    </delete>
    <delete id="removeMany">
        delete from t_rent_pay_item where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <insert id="batchSave" parameterType="top.cflwork.vo.RentPayItemVo" useGeneratedKeys="true" keyProperty="id">
        insert into t_rent_pay_item (rent_pay_id ,pay_time ,reality_pay_time ,is_active ,out_money ,in_money ,pay_money ,out_time ,in_time ,pay_proportion ,description ,create_time ,pay_type,master_id ,hotel_id) values
        <foreach collection="list" item="rentPayItem" separator=",">
            (
            #{rentPayItem.rentPayId},
            #{rentPayItem.payTime},
            #{rentPayItem.realityPayTime},
            #{rentPayItem.isActive},
            #{rentPayItem.outMoney},
            #{rentPayItem.inMoney},
            #{rentPayItem.payMoney},
            #{rentPayItem.outTime},
            #{rentPayItem.inTime},
            #{rentPayItem.payProportion},
            #{rentPayItem.description},
            now(),
            #{rentPayItem.payType},
            #{rentPayItem.masterId},
            #{rentPayItem.hotelId}
            )
        </foreach>
    </insert>
    <delete id="deleteByRentPayItemId" parameterType="long">
        delete from t_rent_pay_item where rent_pay_id= #{id}
    </delete>
    <select id="findList" resultMap="rentPayItemMap" parameterType="top.cflwork.vo.RentPayItemVo">
        select * from t_rent_pay_item where rent_pay_id = #{id}
    </select>
</mapper>