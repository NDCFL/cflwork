<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.cflwork.dao.OucomeItemDAO">
    <resultMap id="oucomeItemMap" type="top.cflwork.vo.OucomeItemVo"></resultMap>
    <sql id="search">
        <if test="#{searchVal!=null} and #{searchVal!=''}">
            and (t.id like concat('%${searchVal}%'))
        </if>
    </sql>
    <select id="getById" resultMap="oucomeItemMap" parameterType="long">
        select  t.id , t.outcome_id , t.subject_name , t.time , t.money from t_out_come_item t where t.id = #{id}
    </select>
    <select id="listPage" resultMap="oucomeItemMap">
        select t.id , t.outcome_id , t.subject_name , t.time , t.money from t_out_come_item t where 1=1 <include refid="search"></include> order by t.create_time desc limit #{pageNo}, #{pageSize}
    </select>
    <select id="count" resultType="long">
        select count(t.id) from t_out_come_item t where 1=1  <include refid="search"></include> order
        by t.create_time desc
    </select>

    <select id="listPages" resultMap="oucomeItemMap">
        select t.id , t.outcome_id , t.subject_name , t.time , t.money from t_out_come_item t
        <where>
            <if test="oucomeItemVo.id != null and oucomeItemVo.id != ''">
                and t.id = #{oucomeItemVo.id}
            </if>
            <if test="oucomeItemVo.outcomeId != null and oucomeItemVo.outcomeId != ''">
                and t.outcome_id = #{oucomeItemVo.outcomeId}
            </if>
            <if test="oucomeItemVo.subjectName != null and oucomeItemVo.subjectName != ''">
                and t.subject_name = #{oucomeItemVo.subjectName}
            </if>
            <if test="oucomeItemVo.time != null and oucomeItemVo.time != ''">
                and t.time = #{oucomeItemVo.time}
            </if>
            <if test="oucomeItemVo.money != null and oucomeItemVo.money != ''">
                and t.money = #{oucomeItemVo.money}
            </if>
        </where>
        <choose>
            <when test="oucomeItemVo.sort != null and oucomeItemVo.sort.trim() != ''">
                order by t.${oucomeItemVo.sort} t.${oucomeItemVo.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
        <if test="pageQuery.pageNo != null and pageQuery.pageSize != null">
            limit #{pageQuery.pageNo}, #{pageQuery.pageSize}
        </if>
    </select>
    <select id="listAll" resultMap="oucomeItemMap">
        select * from t_out_come_item where company_id=#{companyId}
    </select>
    <select id="counts" resultType="long">
        select count(t.id) from t_out_come_item t
        <where>
            <if test="oucomeItemVo.id != null and oucomeItemVo.id != ''">
                and t.id = #{oucomeItemVo.id}
            </if>
            <if test="oucomeItemVo.outcomeId != null and oucomeItemVo.outcomeId != ''">
                and t.outcome_id = #{oucomeItemVo.outcomeId}
            </if>
            <if test="oucomeItemVo.subjectName != null and oucomeItemVo.subjectName != ''">
                and t.subject_name = #{oucomeItemVo.subjectName}
            </if>
            <if test="oucomeItemVo.time != null and oucomeItemVo.time != ''">
                and t.time = #{oucomeItemVo.time}
            </if>
            <if test="oucomeItemVo.money != null and oucomeItemVo.money != ''">
                and t.money = #{oucomeItemVo.money}
            </if>
        </where>
        <choose>
            <when test="oucomeItemVo.sort != null and oucomeItemVo.sort.trim() != ''">
                order by t.${oucomeItemVo.sort} ${oucomeItemVo.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
    </select>

    <insert id="save" parameterType="top.cflwork.vo.OucomeItemVo" useGeneratedKeys="true" keyProperty="id">
        insert into t_out_come_item (
                                                                             outcome_id ,                                                                  subject_name ,                                                                  time ,                                                                  money                                   ) values (
                                                                            #{outcomeId}, 
                                                                #{subjectName}, 
                                                                #{time}, 
                                                                #{money}
                                    )
    </insert>

    <update id="update" parameterType="top.cflwork.vo.OucomeItemVo">
        update t_out_come_item
        <set>
            <if test="outcomeId != null">outcome_id = #{outcomeId
                    },
            </if>
            <if test="subjectName != null">subject_name = #{subjectName
                    },
            </if>
            <if test="time != null">time = #{time
                    },
            </if>
            <if test="money != null">money = #{money
                    }
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateStatus">
        update t_out_come_item set is_active=#{status} where id=#{id}
    </update>
    <delete id="removeById" parameterType="long">
        delete from t_out_come_item where id = #{value}
    </delete>
    <delete id="removeMany">
        delete from t_out_come_item where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>